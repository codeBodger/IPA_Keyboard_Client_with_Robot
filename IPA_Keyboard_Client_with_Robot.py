#!/usr/bin/python3

# Â© 2024 by Rowan Ackerman
# All parts of this and other files in this repository not autogenerated
# are under the copyright of Rowan Ackerman.

import socket
from pynput.keyboard import Controller
from table import TABLE
from random import choice, random as rand
# from time import sleep # just for testing
from gui import GUI
from threading import Thread

HOST = "phonetics.ling.udel.edu"
PORT = 8000

KEYBOARD = Controller()

APP = GUI("IPA Keyboard Client")

def rand64str(length: int) -> str:
    ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'
    out = ""
    for i in range(length):
        out += choice(ALPHABET)
    return out

KEY = bytes(rand64str(18), 'utf-8')
# KEY = b'0' # just for testing

def stop():
	APP.destroy()
	client_socket.close()
	exit()

def new_key(activity: bytes = b'\x02'):
	global linking_key
	linking_key = str(rand())[2:8]
	# linking_key = "123456" # just for testing
	client_socket.sendall(activity + bytes(linking_key, 'utf-8') + KEY)

def connect():
	global client_socket 
	client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	client_socket.connect((HOST, PORT))

def start():
	connect()
	new_key(b'\x00')
	client_loop()

def renew():
	global linking_key
	connect()
	client_socket.sendall(b'\x01' + KEY)
	linking_key = None
	client_loop()

def client_loop():
	global linking_key
	while True:
		# exec(input("\u001b[34m>>> \u001b[0m")); continue # just for testing
		try:
			dataIn = int.from_bytes(client_socket.recv(1), "big")
		except Exception:
			APP.do(set_message, "The socket is closed.")
			client_socket.close()
			return
		APP.do(APP.setBackgroundColour, dataIn)
		# APP.setBackgroundColour(dataIn)
		APP.do(APP.setMessageColour, (dataIn+128) % 256)
		# APP.setMessageColour((dataIn+128) % 256)
		if dataIn >= len(TABLE):
			match dataIn:
				case 254:
					if linking_key is None: APP.do(set_message, "Somehow got connection successful after renew.")
					APP.do(set_message, f"Connection successful.\nLinking key: {linking_key}")
					linking_key = None
				case 253:
					APP.do(set_message, "You've been timed out.")
					client_socket.close()
					APP.do(APP.children["renew-button"].Show)
					# APP.children["renew-button"].Show()
					return
				case 252:
					APP.do(set_message, "Linking successful.")
				case 251:
					APP.do(set_message, "Linking Key in use.\nTry again.")
				case 250:
					APP.do(set_message, "No renew necessary.\nKey already in use.")
					APP.do(APP.children["renew-button"].Hide)
					# APP.children["renew-button"].Hide()
				case 249:
					APP.do(set_message, "Renew successful.")
					APP.do(APP.children["renew-button"].Hide)
					# APP.children["renew-button"].Hide()
				case 248:
					if linking_key is None: APP.do(set_message, "Somehow got connection successful after renew.")
					APP.do(set_message, f"New linking key created.\nLinking key: {linking_key}")
					linking_key = None
				case 247:
					APP.do(set_message, "Long Key in use.\nEnsure random generation.")
				case 255 | _:
					APP.do(set_message, f"An unknown error ocurred: {dataIn}.")
			continue
		APP.do(set_message, f"Sent character {dataIn:3}: {TABLE[dataIn]}")
		# sleep(2) # just for testing
		KEYBOARD.press(TABLE[dataIn])
		KEYBOARD.release(TABLE[dataIn])

def set_message(value: str):
    APP.children["message"].Label = value

def daemon(target):
	return lambda: Thread(target=target, daemon=True).start()

def app():
	APP.button("stop-button", "Stop", stop)
	APP.button("renew-button", "Renew", daemon(renew)).Hide()
	APP.text("message", "Loading...")
	APP.button("new-key-button", "New\nLinking\nKey", new_key, pos=(104,-1), size=(100,85))
	APP.mainloop(daemon(start))

def main():
	app()

if __name__ == "__main__":
	main()
